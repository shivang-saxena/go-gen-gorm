// Code generated by go-gen-gorm. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"gorm.io/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set UserQuerySet

// UserQuerySet is an queryset type for User
type UserQuerySet struct {
	db *gorm.DB
}

// NewUserQuerySet constructs new UserQuerySet
func NewUserQuerySet(db *gorm.DB) UserQuerySet {
	return UserQuerySet{
		db: db.Model(&User{}),
	}
}

func (qs UserQuerySet) w(db *gorm.DB) UserQuerySet {
	return NewUserQuerySet(db)
}

func (qs UserQuerySet) Select(fields ...UserDBSchemaField) UserQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *User) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *User) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) All(ret *[]User) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Count() (int64, error) {
	var count int64
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtEq(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtGt(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtGte(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtLt(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtLte(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtNe(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Delete() error {
	return qs.db.Delete(&User{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(&User{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(&User{})
	return db.RowsAffected, db.Error
}

// EmailEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailEq(email string) UserQuerySet {
	return qs.w(qs.db.Where("email = ?", email))
}

// EmailGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailGt(email string) UserQuerySet {
	return qs.w(qs.db.Where("email > ?", email))
}

// EmailGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailGte(email string) UserQuerySet {
	return qs.w(qs.db.Where("email >= ?", email))
}

// EmailIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailIn(email ...string) UserQuerySet {
	if len(email) == 0 {
		qs.db.AddError(errors.New("must at least pass one email in EmailIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("email IN (?)", email))
}

// EmailLike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailLike(email string) UserQuerySet {
	return qs.w(qs.db.Where("email LIKE ?", email))
}

// EmailLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailLt(email string) UserQuerySet {
	return qs.w(qs.db.Where("email < ?", email))
}

// EmailLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailLte(email string) UserQuerySet {
	return qs.w(qs.db.Where("email <= ?", email))
}

// EmailNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailNe(email string) UserQuerySet {
	return qs.w(qs.db.Where("email != ?", email))
}

// EmailNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailNotIn(email ...string) UserQuerySet {
	if len(email) == 0 {
		qs.db.AddError(errors.New("must at least pass one email in EmailNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("email NOT IN (?)", email))
}

// EmailNotlike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailNotlike(email string) UserQuerySet {
	return qs.w(qs.db.Where("email NOT LIKE ?", email))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) GetUpdater() UserUpdater {
	return NewUserUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDEq(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDGt(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDGte(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDIn(ID ...uint) UserQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDLt(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDLte(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDNe(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDNotIn(ID ...uint) UserQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Limit(limit int) UserQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameEq(name string) UserQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameGt(name string) UserQuerySet {
	return qs.w(qs.db.Where("name > ?", name))
}

// NameGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameGte(name string) UserQuerySet {
	return qs.w(qs.db.Where("name >= ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameIn(name ...string) UserQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameLike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameLike(name string) UserQuerySet {
	return qs.w(qs.db.Where("name LIKE ?", name))
}

// NameLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameLt(name string) UserQuerySet {
	return qs.w(qs.db.Where("name < ?", name))
}

// NameLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameLte(name string) UserQuerySet {
	return qs.w(qs.db.Where("name <= ?", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameNe(name string) UserQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameNotIn(name ...string) UserQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// NameNotlike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameNotlike(name string) UserQuerySet {
	return qs.w(qs.db.Where("name NOT LIKE ?", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Offset(offset int) UserQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs UserQuerySet) One(ret *User) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByCreatedAt() UserQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByEmail is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByEmail() UserQuerySet {
	return qs.w(qs.db.Order("email ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByID() UserQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByName is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByName() UserQuerySet {
	return qs.w(qs.db.Order("name ASC"))
}

// OrderAscBySurname is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscBySurname() UserQuerySet {
	return qs.w(qs.db.Order("user_surname ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByUpdatedAt() UserQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByCreatedAt() UserQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByEmail is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByEmail() UserQuerySet {
	return qs.w(qs.db.Order("email DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByID() UserQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByName is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByName() UserQuerySet {
	return qs.w(qs.db.Order("name DESC"))
}

// OrderDescBySurname is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescBySurname() UserQuerySet {
	return qs.w(qs.db.Order("user_surname DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByUpdatedAt() UserQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PreloadDeletedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PreloadDeletedAt() UserQuerySet {
	return qs.w(qs.db.Preload("DeletedAt"))
}

// SurnameEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameEq(surname string) UserQuerySet {
	return qs.w(qs.db.Where("user_surname = ?", surname))
}

// SurnameGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameGt(surname string) UserQuerySet {
	return qs.w(qs.db.Where("user_surname > ?", surname))
}

// SurnameGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameGte(surname string) UserQuerySet {
	return qs.w(qs.db.Where("user_surname >= ?", surname))
}

// SurnameIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameIn(surname ...string) UserQuerySet {
	if len(surname) == 0 {
		qs.db.AddError(errors.New("must at least pass one surname in SurnameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_surname IN (?)", surname))
}

// SurnameIsNotNull is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameIsNotNull() UserQuerySet {
	return qs.w(qs.db.Where("user_surname IS NOT NULL"))
}

// SurnameIsNull is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameIsNull() UserQuerySet {
	return qs.w(qs.db.Where("user_surname IS NULL"))
}

// SurnameLike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameLike(surname string) UserQuerySet {
	return qs.w(qs.db.Where("user_surname LIKE ?", surname))
}

// SurnameLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameLt(surname string) UserQuerySet {
	return qs.w(qs.db.Where("user_surname < ?", surname))
}

// SurnameLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameLte(surname string) UserQuerySet {
	return qs.w(qs.db.Where("user_surname <= ?", surname))
}

// SurnameNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameNe(surname string) UserQuerySet {
	return qs.w(qs.db.Where("user_surname != ?", surname))
}

// SurnameNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameNotIn(surname ...string) UserQuerySet {
	if len(surname) == 0 {
		qs.db.AddError(errors.New("must at least pass one surname in SurnameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_surname NOT IN (?)", surname))
}

// SurnameNotlike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) SurnameNotlike(surname string) UserQuerySet {
	return qs.w(qs.db.Where("user_surname NOT LIKE ?", surname))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtEq(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtGt(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtGte(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtLt(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtLte(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtNe(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetCreatedAt(createdAt time.Time) UserUpdater {
	u.fields[string(UserDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetDeletedAt(deletedAt gorm.DeletedAt) UserUpdater {
	u.fields[string(UserDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetEmail is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetEmail(email string) UserUpdater {
	u.fields[string(UserDBSchema.Email)] = email
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetID(ID uint) UserUpdater {
	u.fields[string(UserDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetName(name string) UserUpdater {
	u.fields[string(UserDBSchema.Name)] = name
	return u
}

// SetSurname is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetSurname(surname *string) UserUpdater {
	u.fields[string(UserDBSchema.Surname)] = surname
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetUpdatedAt(updatedAt time.Time) UserUpdater {
	u.fields[string(UserDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u UserUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u UserUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set UserQuerySet

// ===== BEGIN of User modifiers

// UserDBSchemaField describes database schema field. It requires for method 'Update'
type UserDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f UserDBSchemaField) String() string {
	return string(f)
}

// UserDBSchema stores db field names of User
var UserDBSchema = struct {
	ID        UserDBSchemaField
	CreatedAt UserDBSchemaField
	UpdatedAt UserDBSchemaField
	DeletedAt UserDBSchemaField
	Name      UserDBSchemaField
	Surname   UserDBSchemaField
	Email     UserDBSchemaField
}{

	ID:        UserDBSchemaField("id"),
	CreatedAt: UserDBSchemaField("created_at"),
	UpdatedAt: UserDBSchemaField("updated_at"),
	DeletedAt: UserDBSchemaField("deleted_at"),
	Name:      UserDBSchemaField("name"),
	Surname:   UserDBSchemaField("user_surname"),
	Email:     UserDBSchemaField("email"),
}

// Update updates User fields by primary key
// nolint: dupl
func (o *User) Update(db *gorm.DB, fields ...UserDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":           o.ID,
		"created_at":   o.CreatedAt,
		"updated_at":   o.UpdatedAt,
		"deleted_at":   o.DeletedAt,
		"name":         o.Name,
		"user_surname": o.Surname,
		"email":        o.Email,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update User %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// UserUpdater is an User updates manager
type UserUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewUserUpdater creates new User updater
// nolint: dupl
func NewUserUpdater(db *gorm.DB) UserUpdater {
	return UserUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&User{}),
	}
}

// ===== END of User modifiers

// ===== END of all query sets
